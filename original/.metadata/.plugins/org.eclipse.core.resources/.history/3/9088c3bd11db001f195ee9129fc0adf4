package com.example.origin.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.origin.entity.Collection;
import com.example.origin.repository.CollectionRepository;
import com.example.origin.repository.CustomCollectionRepository;
import com.example.origin.service.CollectionService;

@Controller
public class HomeController {
private final CollectionRepository collectionRepository;
private final CustomCollectionRepository customCollectionRepository;

private final CollectionService collectionService;
	
	public HomeController(CollectionRepository collectionRepository
						  ,CollectionService collectionService
						  , CustomCollectionRepository customCollectionRepository) {
		this.collectionRepository = collectionRepository;
		this.collectionService = collectionService;
		 this.customCollectionRepository = customCollectionRepository;
	}
	
	
	 @GetMapping
	 public String index(Model model, @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC)Pageable pageable
			 			 , @RequestParam(defaultValue = "name") String sortBy,
			 		     @RequestParam(defaultValue = "asc") String direction
			 		    
			 			) {
		 System.out.println("テスト");
	     Sort sort = Sort.by(Sort.Direction.fromString(direction), sortBy);
	     Pageable sortedPageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), sort);
	     System.out.println("テスト２");
	     Page<Collection> collectionPage = collectionRepository.findAll(sortedPageable);
	     model.addAttribute("collection", collectionPage);
	     System.out.println("テスト3");
	     System.out.println(collectionPage);
	     System.out.println("データベースにあるコレクション数: " + collectionRepository.count());
	     return "index";             
	        
	      
	    }  
	 
	 
//	 @GetMapping
//	 public String index(Model model, @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC)Pageable pageable
//			 			) {
//	        Page<Collection> collectionPage = collectionRepository.findAll(pageable);       
//	      
//	        model.addAttribute("collectionPage", collectionPage);             
	        
//	        return "index";
//	    }  
	 
	 
	 
	 
	 
//	 @PostMapping("item_list")
//	 public String showCollectionList(Model model,String sortFg) {
//		 List<Collection>collectionList=collectionService.findAll(sortFg);
//		 model.addAttribute("collectionList",collectionList);
//		 Map<String,String>map=collectionService.createMap();
//		 model.addAttribute("sortList",map);
//		 model.addAttribute("selectedValue",sortFg);
//		 return "collection_list";
//	 }
	 
	 @GetMapping("/collections")
	 public String getCollections(
	     @RequestParam(defaultValue = "name") String sortBy,
	     @RequestParam(defaultValue = "asc") String direction,
	     Pageable pageable,
	     Model model
	 ) {
		 System.out.println("テスト");
	     Sort sort = Sort.by(Sort.Direction.fromString(direction), sortBy);
	     Pageable sortedPageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), sort);
	     System.out.println("テスト２");
	     Page<Collection> collection = collectionRepository.findAll(sortedPageable);
	     model.addAttribute("collection", collection);
	     System.out.println("テスト3");
	     System.out.println(collection);
	     return "index";
	 }
     
}